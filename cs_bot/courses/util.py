import random
from cs_bot.util.get_class_attributes import get_class_attributes
from cs_bot.util.format_if import format_if
from cs_bot.util.html import html_href
from cs_bot.util.poll import Poll, PollSeria


class Course:
    ALGORITHMS = 'algorithms'
    ALGORITHMS_2 = 'algorithms_2'
    CALCULUS = 'calculus'
    CPP = 'cpp'
    DISCRETE_MATH = 'discrete_math'
    INTRODUCTION_TO_CS = 'introduction_to_cs'
    LINEAR_ALGEBRA = 'linear_algebra'
    PYTHON = 'python'

    @staticmethod
    def names(ordering=False, beautify=False):
        courses = get_class_attributes(Course)
        if ordering:
            courses.sort(key=lambda course: Course.order_ind(course))
        if beautify:
            courses = list([Course.beautify(course) for course in courses])
        return courses

    @staticmethod
    def beautify(course_title):
        beautifier = {
            Course.ALGORITHMS: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö',
            Course.ALGORITHMS_2: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö - 2',
            Course.CALCULUS: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
            Course.CPP: 'C++',
            Course.DISCRETE_MATH: '–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            Course.INTRODUCTION_TO_CS: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏',
            Course.LINEAR_ALGEBRA: '–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞',
            Course.PYTHON: 'Python'
        }
        return beautifier.get(course_title, '')

    @staticmethod
    def order_ind(course_title):
        course_order = {
            Course.ALGORITHMS: 2,
            Course.ALGORITHMS_2: 7,
            Course.CALCULUS: 6,
            Course.CPP: 5,
            Course.DISCRETE_MATH: 3,
            Course.INTRODUCTION_TO_CS: 0,
            Course.LINEAR_ALGEBRA: 4,
            Course.PYTHON: 1
        }
        return course_order[course_title]


class TestUnitPurpose:
    STUDY = 'study'
    COMPETE = 'compete'


def build_course_list_with_meta(chat_id, db):
    def course_priority(available_courses, completed_courses):
        def priority(course):
            if course not in available_courses:
                return 2
            if course in completed_courses:
                return 1
            return 0
        return priority

    course_prerequisites = db.get_all_courses_prerequisites(use_cache=True)
    completed_courses = db.get_completed_courses(chat_id)
    available_courses = set()
    for course in Course.names():
        if course_prerequisites[course].issubset(completed_courses):
            available_courses.add(course)
    courses = sorted(Course.names(ordering=True), key=course_priority(available_courses, completed_courses))
    return courses, available_courses, completed_courses


def source2str(source):
    # pattern: {author}: {title} ({year}) [{platform}] [{language}]
    href = html_href(
        format_if('{}: ', source['author'], condition=lambda args: None not in args) + source['title'],
        href=source['url'])
    string = ''.join([
        href,
        format_if(' ({})', source['year'], condition=lambda args: None not in args),
        format_if(' [{}]', source['platform'], condition=lambda args: None not in args),
        format_if(' [{}]', source['language'], condition=lambda args: None not in args)
    ])
    return string


def course_menu_reaction(course):
    reacts = {
        Course.ALGORITHMS: ['–ö–∞–∫ –Ω–∞—Å—á—ë—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π? üßê'],
        Course.ALGORITHMS_2: ['–ö–∞–∫ –Ω–∞—Å—á—ë—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π –∑–∞ O(1)? üßê'],
        Course.CALCULUS: ['–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –¢–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –º–æ–≥—É—Ç —É—Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ...\n—á–µ–º—É-—Ç–æ –±–µ–∫—Å–æ–Ω–µ—á–Ω–æ–º—É –≤ –æ–±—â–µ–º.'],
        Course.CPP: ['–£–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏?'],
        Course.DISCRETE_MATH: ['P=NP?', '–ê —Ç—ã –ø—Ä–∞–≤–¥–∞ —É–º–µ–µ—à—å —Å—á–∏—Ç–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å —É–º–Ω–æ–∂–µ–Ω–∏—è?',
                               '–û–±—ä–µ–¥–∏–Ω–∏–ª–∏ –∫–∞–∫-—Ç–æ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ —Ç–µ—Ö–Ω–∞—Ä–µ–π –∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–∏–µ–≤ –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.'],
        Course.INTRODUCTION_TO_CS: ['–ü—Ä–∞–≤–¥–∞ –ª–∏ —á—Ç–æ —ç—Ç–æ—Ç –∫—É—Ä—Å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ —É–º–µ–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä?\n'
                                    '–ù–µ—Ç, –æ–Ω –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –µ–≥–æ –≤—ã–∫–ª—é—á–∏—Ç—å üôÉ'],
        Course.LINEAR_ALGEBRA: ['–ï—Å–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∫—É–± –≤—ã–≤–µ—Ä–Ω—É—Ç –Ω–∞–∏–∑–Ω–∞–Ω–∫—É, '
                                '—Ç–æ –Ω–∞–º –∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –Ω–µ –æ —á–µ–º!'],
        Course.PYTHON: ['...–ü–∏—Ç–æ–Ω–∞ –ø—Ä–∏—Ä—É—á–∏—Ç—å –Ω–µ—Å–ª–æ–∂–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ.\n'
                        '–ì–ª–∞–≤–Ω–æ–µ —Å–ª–µ–¥–∏—Ç—å, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Ä–∏—Å–æ–≤–∞–ª –ø—Ä—É–∂–∏–Ω—É. üêç']
    }
    return random.choice(reacts.get(course, ['–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –º–æ–∂–µ—Ç –≤ –∂–∏–∑–Ω–∏ –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è.']))


def is_course_study_poll_seria(poll_controller, call):
    return poll_controller.has(call.user.id, call.poll_id, tags_like=[TestUnitPurpose.STUDY, Course.names()])


def make_course_study_poll_seria(chat_id, db, course, tests_count=5):
    all_test_units = db.get_tests(course, TestUnitPurpose.STUDY)
    test_units = random.sample(all_test_units, min(tests_count, len(all_test_units)))
    polls = [Poll(chat_id, test_unit) for test_unit in test_units]
    return PollSeria(polls, [TestUnitPurpose.STUDY, course])


def get_course_from_poll_seria(poll_seria):
    for tag in poll_seria.tags:
        if tag in Course.names():
            return tag
