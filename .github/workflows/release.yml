name: Release CI/CD Pipeline
on:
  push:
    tags:
      - v*

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    env:
      TEST_BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN }}
      TEST_CHAT_ID: ${{ secrets.TEST_CHAT_ID }}
    steps:
      - uses: actions/checkout@v3

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          envkey_DB_HOST: ${{ secrets.DB_HOST }}
          envkey_DB_PORT: ${{ secrets.DB_PORT }}
          envkey_DB_USER: ${{ secrets.DB_USER }}
          envkey_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_DB_NAME: ${{ secrets.DB_NAME }}
          envkey_DB_CACHE_SIZE: ${{ secrets.DB_CACHE_SIZE }}
          envkey_DB_CACHE_TTL: ${{ secrets.DB_CACHE_TTL }}
          envkey_DB_MAX_ROW_COUNT_FOR_CACHE: ${{ secrets.DB_MAX_ROW_COUNT_FOR_CACHE }}
          envkey_FILES_DIR: ${{ secrets.FILES_DIR }}
          envkey_MAX_USERS_ONLINE: ${{ secrets.MAX_USERS_ONLINE }}
          envkey_TEST_BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN }}
          envkey TEST_DB_NAME: ${{ secrets.TEST_DB_NAME }}
          directory: '.'
          fail_on_empty: true

      - name: Set up Python 3.9.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9.9

      - name: Install dependencies
        run: |
          pip3 install -r requirements-dev.txt

      - name: Run linter
        run: flake8 . --count --show-source --statistics

      - name: Run tests
        run: python -m pytest

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
      ECS_CONTAINER_NAME: ${{ secrets.ECS_CONTAINER_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          envkey_DB_HOST: ${{ secrets.DB_HOST }}
          envkey_DB_PORT: ${{ secrets.DB_PORT }}
          envkey_DB_USER: ${{ secrets.DB_USER }}
          envkey_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_DB_NAME: ${{ secrets.DB_NAME }}
          envkey_DB_CACHE_SIZE: ${{ secrets.DB_CACHE_SIZE }}
          envkey_DB_CACHE_TTL: ${{ secrets.DB_CACHE_TTL }}
          envkey_DB_MAX_ROW_COUNT_FOR_CACHE: ${{ secrets.DB_MAX_ROW_COUNT_FOR_CACHE }}
          envkey_FILES_DIR: ${{ secrets.FILES_DIR }}
          envkey_MAX_USERS_ONLINE: ${{ secrets.MAX_USERS_ONLINE }}
          envkey_TEST_BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN }}
          envkey TEST_DB_NAME: ${{ secrets.TEST_DB_NAME }}
          directory: '.'
          fail_on_empty: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
